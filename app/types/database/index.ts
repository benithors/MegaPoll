/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/extended_profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.extended_profiles.id"];
          profile?: parameters["rowFilter.extended_profiles.profile"];
          followers?: parameters["rowFilter.extended_profiles.followers"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["extended_profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** extended_profiles */
          extended_profiles?: definitions["extended_profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.extended_profiles.id"];
          profile?: parameters["rowFilter.extended_profiles.profile"];
          followers?: parameters["rowFilter.extended_profiles.followers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.extended_profiles.id"];
          profile?: parameters["rowFilter.extended_profiles.profile"];
          followers?: parameters["rowFilter.extended_profiles.followers"];
        };
        body: {
          /** extended_profiles */
          extended_profiles?: definitions["extended_profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_instances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_instances.id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_instances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_instances */
          poll_instances?: definitions["poll_instances"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_instances.id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_instances.id"];
        };
        body: {
          /** poll_instances */
          poll_instances?: definitions["poll_instances"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_option_votes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_option_votes.id"];
          poll_instance?: parameters["rowFilter.poll_option_votes.poll_instance"];
          poll_option?: parameters["rowFilter.poll_option_votes.poll_option"];
          votes?: parameters["rowFilter.poll_option_votes.votes"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_option_votes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_option_votes */
          poll_option_votes?: definitions["poll_option_votes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_option_votes.id"];
          poll_instance?: parameters["rowFilter.poll_option_votes.poll_instance"];
          poll_option?: parameters["rowFilter.poll_option_votes.poll_option"];
          votes?: parameters["rowFilter.poll_option_votes.votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_option_votes.id"];
          poll_instance?: parameters["rowFilter.poll_option_votes.poll_instance"];
          poll_option?: parameters["rowFilter.poll_option_votes.poll_option"];
          votes?: parameters["rowFilter.poll_option_votes.votes"];
        };
        body: {
          /** poll_option_votes */
          poll_option_votes?: definitions["poll_option_votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_option_votes_2_users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_option_votes_2_users.id"];
          profile?: parameters["rowFilter.poll_option_votes_2_users.profile"];
          poll_option_vote?: parameters["rowFilter.poll_option_votes_2_users.poll_option_vote"];
          user_cookie?: parameters["rowFilter.poll_option_votes_2_users.user_cookie"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_option_votes_2_users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_option_votes_2_users */
          poll_option_votes_2_users?: definitions["poll_option_votes_2_users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_option_votes_2_users.id"];
          profile?: parameters["rowFilter.poll_option_votes_2_users.profile"];
          poll_option_vote?: parameters["rowFilter.poll_option_votes_2_users.poll_option_vote"];
          user_cookie?: parameters["rowFilter.poll_option_votes_2_users.user_cookie"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_option_votes_2_users.id"];
          profile?: parameters["rowFilter.poll_option_votes_2_users.profile"];
          poll_option_vote?: parameters["rowFilter.poll_option_votes_2_users.poll_option_vote"];
          user_cookie?: parameters["rowFilter.poll_option_votes_2_users.user_cookie"];
        };
        body: {
          /** poll_option_votes_2_users */
          poll_option_votes_2_users?: definitions["poll_option_votes_2_users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_options": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_options.id"];
          option?: parameters["rowFilter.poll_options.option"];
          poll_question?: parameters["rowFilter.poll_options.poll_question"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_options"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_options */
          poll_options?: definitions["poll_options"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_options.id"];
          option?: parameters["rowFilter.poll_options.option"];
          poll_question?: parameters["rowFilter.poll_options.poll_question"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_options.id"];
          option?: parameters["rowFilter.poll_options.option"];
          poll_question?: parameters["rowFilter.poll_options.poll_question"];
        };
        body: {
          /** poll_options */
          poll_options?: definitions["poll_options"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_questions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_questions.id"];
          question?: parameters["rowFilter.poll_questions.question"];
          poll_template?: parameters["rowFilter.poll_questions.poll_template"];
          multipoll?: parameters["rowFilter.poll_questions.multipoll"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_questions */
          poll_questions?: definitions["poll_questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_questions.id"];
          question?: parameters["rowFilter.poll_questions.question"];
          poll_template?: parameters["rowFilter.poll_questions.poll_template"];
          multipoll?: parameters["rowFilter.poll_questions.multipoll"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_questions.id"];
          question?: parameters["rowFilter.poll_questions.question"];
          poll_template?: parameters["rowFilter.poll_questions.poll_template"];
          multipoll?: parameters["rowFilter.poll_questions.multipoll"];
        };
        body: {
          /** poll_questions */
          poll_questions?: definitions["poll_questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_templates": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_templates.id"];
          created_at?: parameters["rowFilter.poll_templates.created_at"];
          poll_name?: parameters["rowFilter.poll_templates.poll_name"];
          poll_description?: parameters["rowFilter.poll_templates.poll_description"];
          cover_image?: parameters["rowFilter.poll_templates.cover_image"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_templates"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_templates */
          poll_templates?: definitions["poll_templates"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_templates.id"];
          created_at?: parameters["rowFilter.poll_templates.created_at"];
          poll_name?: parameters["rowFilter.poll_templates.poll_name"];
          poll_description?: parameters["rowFilter.poll_templates.poll_description"];
          cover_image?: parameters["rowFilter.poll_templates.cover_image"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_templates.id"];
          created_at?: parameters["rowFilter.poll_templates.created_at"];
          poll_name?: parameters["rowFilter.poll_templates.poll_name"];
          poll_description?: parameters["rowFilter.poll_templates.poll_description"];
          cover_image?: parameters["rowFilter.poll_templates.cover_image"];
        };
        body: {
          /** poll_templates */
          poll_templates?: definitions["poll_templates"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description read-only data of profiles */
  extended_profiles: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    profile: number;
    /** Format: bigint */
    followers?: number;
  };
  /** @description Instantiation of a poll template */
  poll_instances: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
  };
  /** @description Is created with poll_instances and holds the vote data */
  poll_option_votes: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `poll_instances.id`.<fk table='poll_instances' column='id'/>
     */
    poll_instance: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `poll_options.id`.<fk table='poll_options' column='id'/>
     */
    poll_option: number;
    /** Format: bigint */
    votes: number;
  };
  /** @description Contains the votes of a user by either cookie or profile */
  poll_option_votes_2_users: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    profile?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `poll_option_votes.id`.<fk table='poll_option_votes' column='id'/>
     */
    poll_option_vote: number;
    /** Format: uuid */
    user_cookie?: string;
  };
  /** @description Options of a question */
  poll_options: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    option: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `poll_questions.id`.<fk table='poll_questions' column='id'/>
     */
    poll_question: number;
  };
  /** @description Questions of a poll template */
  poll_questions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    question: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `poll_templates.id`.<fk table='poll_templates' column='id'/>
     */
    poll_template: number;
    /**
     * Format: boolean
     * @default true
     */
    multipoll: boolean;
  };
  /** @description Main data of a poll */
  poll_templates: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    poll_name: string;
    /** Format: character varying */
    poll_description: string;
    /** Format: character varying */
    cover_image?: string;
  };
  /** @description Editable fields of a Profile */
  profiles: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    username: string;
    /** Format: character varying */
    avatar_url?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description extended_profiles */
  "body.extended_profiles": definitions["extended_profiles"];
  /** Format: bigint */
  "rowFilter.extended_profiles.id": string;
  /** Format: bigint */
  "rowFilter.extended_profiles.profile": string;
  /** Format: bigint */
  "rowFilter.extended_profiles.followers": string;
  /** @description poll_instances */
  "body.poll_instances": definitions["poll_instances"];
  /** Format: character varying */
  "rowFilter.poll_instances.id": string;
  /** @description poll_option_votes */
  "body.poll_option_votes": definitions["poll_option_votes"];
  /** Format: bigint */
  "rowFilter.poll_option_votes.id": string;
  /** Format: character varying */
  "rowFilter.poll_option_votes.poll_instance": string;
  /** Format: bigint */
  "rowFilter.poll_option_votes.poll_option": string;
  /** Format: bigint */
  "rowFilter.poll_option_votes.votes": string;
  /** @description poll_option_votes_2_users */
  "body.poll_option_votes_2_users": definitions["poll_option_votes_2_users"];
  /** Format: bigint */
  "rowFilter.poll_option_votes_2_users.id": string;
  /** Format: bigint */
  "rowFilter.poll_option_votes_2_users.profile": string;
  /** Format: bigint */
  "rowFilter.poll_option_votes_2_users.poll_option_vote": string;
  /** Format: uuid */
  "rowFilter.poll_option_votes_2_users.user_cookie": string;
  /** @description poll_options */
  "body.poll_options": definitions["poll_options"];
  /** Format: bigint */
  "rowFilter.poll_options.id": string;
  /** Format: character varying */
  "rowFilter.poll_options.option": string;
  /** Format: bigint */
  "rowFilter.poll_options.poll_question": string;
  /** @description poll_questions */
  "body.poll_questions": definitions["poll_questions"];
  /** Format: bigint */
  "rowFilter.poll_questions.id": string;
  /** Format: character varying */
  "rowFilter.poll_questions.question": string;
  /** Format: bigint */
  "rowFilter.poll_questions.poll_template": string;
  /** Format: boolean */
  "rowFilter.poll_questions.multipoll": string;
  /** @description poll_templates */
  "body.poll_templates": definitions["poll_templates"];
  /** Format: bigint */
  "rowFilter.poll_templates.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.poll_templates.created_at": string;
  /** Format: character varying */
  "rowFilter.poll_templates.poll_name": string;
  /** Format: character varying */
  "rowFilter.poll_templates.poll_description": string;
  /** Format: character varying */
  "rowFilter.poll_templates.cover_image": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: bigint */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.created_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: character varying */
  "rowFilter.profiles.avatar_url": string;
}

export interface operations {}

export interface external {}
